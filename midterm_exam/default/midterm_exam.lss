
midterm_exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005b  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000011f  00000000  00000000  00000237  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000093  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d3  00000000  00000000  000003e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ac  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002b  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8e:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Disp_Seg>:
unsigned char seg_tbl[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x27,0x7F, 0x67};
unsigned char seg_tbl1[] = {0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,0x01, 0x01};

void Disp_Seg(int num)
{
	PORTD=(Seg_Arr[num]<<4)&0xF0;
  96:	fc 01       	movw	r30, r24
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	e0 50       	subi	r30, 0x00	; 0
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	20 81       	ld	r18, Z
  a2:	31 81       	ldd	r19, Z+1	; 0x01
  a4:	c9 01       	movw	r24, r18
  a6:	54 e0       	ldi	r21, 0x04	; 4
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	5a 95       	dec	r21
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Disp_Seg+0x12>
  b0:	8b b9       	out	0x0b, r24	; 11
	PORTB=(Seg_Arr[num]>>4)&0xFF|0x30;
  b2:	c9 01       	movw	r24, r18
  b4:	44 e0       	ldi	r20, 0x04	; 4
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	4a 95       	dec	r20
  bc:	e1 f7       	brne	.-8      	; 0xb6 <Disp_Seg+0x20>
  be:	80 63       	ori	r24, 0x30	; 48
  c0:	85 b9       	out	0x05, r24	; 5
	PORTC=(Seg_Arr[num]>>2)&0xFF;
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	28 b9       	out	0x08, r18	; 8
}
  cc:	08 95       	ret

000000ce <dec_to_hx>:

void dec_to_hx(unsigned char num)
{
	PORTD=seg_tbl[num];
  ce:	a8 2f       	mov	r26, r24
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	fd 01       	movw	r30, r26
  d4:	e0 5e       	subi	r30, 0xE0	; 224
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	80 81       	ld	r24, Z
  da:	8b b9       	out	0x0b, r24	; 11
	PORTB=0x3F & seg_tbl[num];
  dc:	8f 73       	andi	r24, 0x3F	; 63
  de:	85 b9       	out	0x05, r24	; 5

	PORTC=	seg_tbl1[num]&Seg_Arr[num];  
  e0:	fd 01       	movw	r30, r26
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	e0 50       	subi	r30, 0x00	; 0
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	a6 5d       	subi	r26, 0xD6	; 214
  ec:	be 4f       	sbci	r27, 0xFE	; 254
  ee:	80 81       	ld	r24, Z
  f0:	9c 91       	ld	r25, X
  f2:	89 23       	and	r24, r25
  f4:	88 b9       	out	0x08, r24	; 8
}
  f6:	08 95       	ret

000000f8 <main>:

int main(void)
{
	DDRD=0xF0;
  f8:	80 ef       	ldi	r24, 0xF0	; 240
  fa:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x3F;
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	84 b9       	out	0x04, r24	; 4
	DDRC=0x3F;
 100:	87 b9       	out	0x07, r24	; 7
			Disp_Seg(0);
			_delay_ms(300);
		}	
	}
*/
Disp_Seg(0);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 4b 00 	call	0x96	; 0x96 <Disp_Seg>
}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
