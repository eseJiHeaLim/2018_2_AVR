
week11_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000001c6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000044  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000167  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fe  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ba  00000000  00000000  0000048f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000da  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <LED_BLINK>:
#include <avr/interrupt.h>
unsigned char TovVal = 0;

void LED_BLINK()
{
	PORTD = 0x00;
  90:	1b b8       	out	0x0b, r1	; 11
  92:	88 eb       	ldi	r24, 0xB8	; 184
  94:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	20 e9       	ldi	r18, 0x90	; 144
  98:	31 e0       	ldi	r19, 0x01	; 1
  9a:	f9 01       	movw	r30, r18
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LED_BLINK+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <LED_BLINK+0xa>
	_delay_ms(300);
	PORTD = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8b b9       	out	0x0b, r24	; 11
}
  a8:	08 95       	ret

000000aa <__vector_13>:


ISR(TIMER1_OVF_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	TCNT1 = 0xFFFF - 0x3D09; //To make 5ms 
  cc:	86 ef       	ldi	r24, 0xF6	; 246
  ce:	92 ec       	ldi	r25, 0xC2	; 194
  d0:	90 93 85 00 	sts	0x0085, r25
  d4:	80 93 84 00 	sts	0x0084, r24
	TovVal++;
  d8:	80 91 00 01 	lds	r24, 0x0100
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 00 01 	sts	0x0100, r24

	if (TovVal == 1)
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	21 f4       	brne	.+8      	; 0xee <__vector_13+0x44>
	{
		LED_BLINK();
  e6:	0e 94 48 00 	call	0x90	; 0x90 <LED_BLINK>
		TovVal = 0;
  ea:	10 92 00 01 	sts	0x0100, r1
	}
	sei(); 
  ee:	78 94       	sei
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main()
{

	unsigned char in;
	cli();
 112:	f8 94       	cli
	DDRD = 0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
 118:	8b b9       	out	0x0b, r24	; 11

	TCCR1A = 0x00;
 11a:	10 92 80 00 	sts	0x0080, r1

	TCCR1B |= (1 << CS12);
 11e:	80 91 81 00 	lds	r24, 0x0081
 122:	84 60       	ori	r24, 0x04	; 4
 124:	80 93 81 00 	sts	0x0081, r24
	//1024 prescaler
	TCCR1B |= (1 << CS10);
 128:	80 91 81 00 	lds	r24, 0x0081
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 93 81 00 	sts	0x0081, r24

	TCNT1 = 0xFFFF - 0x3D09;
 132:	86 ef       	ldi	r24, 0xF6	; 246
 134:	92 ec       	ldi	r25, 0xC2	; 194
 136:	90 93 85 00 	sts	0x0085, r25
 13a:	80 93 84 00 	sts	0x0084, r24

	TIMSK1 |= 1 << TOIE1;
 13e:	80 91 6f 00 	lds	r24, 0x006F
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 |= 1 << TOV1;
 148:	b0 9a       	sbi	0x16, 0	; 22

	sei();
 14a:	78 94       	sei
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x3a>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
