
seveenSedment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000190  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000101  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000163  00000000  00000000  000004d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000de  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
unsigned char seg_tb_B[]={0x3F,0x06,0x1B,0x0F,0x26,0x2D,0x3D,0x07,0x3F,0x2F};
unsigned char seg_tb_C[]={0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x01};


void main()
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	DDRB=0xFF;
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	94 b9       	out	0x04, r25	; 4
	DDRC=0x3F;
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	87 b9       	out	0x07, r24	; 7
	DDRD=0xFF;  // 포트 F 모든 비트를 출력핀으로 
  a6:	9a b9       	out	0x0a, r25	; 10
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	00 e9       	ldi	r16, 0x90	; 144
  ae:	11 e0       	ldi	r17, 0x01	; 1
	*/
	
	for (int i = 0 ; i<100 ; i++)
	{
		int dec = i/10;
		int one = i%10;
  b0:	ce 01       	movw	r24, r28
  b2:	6a e0       	ldi	r22, 0x0A	; 10
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	0e 94 82 00 	call	0x104	; 0x104 <__divmodhi4>
  ba:	9c 01       	movw	r18, r24
		PORTD=seg_tb[dec];
  bc:	ce 01       	movw	r24, r28
  be:	6a e0       	ldi	r22, 0x0A	; 10
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	0e 94 82 00 	call	0x104	; 0x104 <__divmodhi4>
  c6:	fb 01       	movw	r30, r22
  c8:	e0 50       	subi	r30, 0x00	; 0
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 81       	ld	r24, Z
  ce:	8b b9       	out	0x0b, r24	; 11
		PORTB=seg_tb_B[one];
  d0:	f9 01       	movw	r30, r18
  d2:	e6 5f       	subi	r30, 0xF6	; 246
  d4:	fe 4f       	sbci	r31, 0xFE	; 254
  d6:	80 81       	ld	r24, Z
  d8:	85 b9       	out	0x05, r24	; 5
		PORTC=seg_tb_C[one];
  da:	2c 5e       	subi	r18, 0xEC	; 236
  dc:	3e 4f       	sbci	r19, 0xFE	; 254
  de:	f9 01       	movw	r30, r18
  e0:	80 81       	ld	r24, Z
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	88 e8       	ldi	r24, 0x88	; 136
  e6:	93 e1       	ldi	r25, 0x13	; 19
  e8:	f8 01       	movw	r30, r16
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f0:	d9 f7       	brne	.-10     	; 0xe8 <main+0x52>

		}
	}
	*/
	
	for (int i = 0 ; i<100 ; i++)
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	c4 36       	cpi	r28, 0x64	; 100
  f6:	d1 05       	cpc	r29, r1
  f8:	d9 f6       	brne	.-74     	; 0xb0 <main+0x1a>
		PORTC=seg_tb_C[one];
		_delay_ms(500);
	}
	

}	
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <__divmodhi4>:
 104:	97 fb       	bst	r25, 7
 106:	09 2e       	mov	r0, r25
 108:	07 26       	eor	r0, r23
 10a:	0a d0       	rcall	.+20     	; 0x120 <__divmodhi4_neg1>
 10c:	77 fd       	sbrc	r23, 7
 10e:	04 d0       	rcall	.+8      	; 0x118 <__divmodhi4_neg2>
 110:	0c d0       	rcall	.+24     	; 0x12a <__udivmodhi4>
 112:	06 d0       	rcall	.+12     	; 0x120 <__divmodhi4_neg1>
 114:	00 20       	and	r0, r0
 116:	1a f4       	brpl	.+6      	; 0x11e <__divmodhi4_exit>

00000118 <__divmodhi4_neg2>:
 118:	70 95       	com	r23
 11a:	61 95       	neg	r22
 11c:	7f 4f       	sbci	r23, 0xFF	; 255

0000011e <__divmodhi4_exit>:
 11e:	08 95       	ret

00000120 <__divmodhi4_neg1>:
 120:	f6 f7       	brtc	.-4      	; 0x11e <__divmodhi4_exit>
 122:	90 95       	com	r25
 124:	81 95       	neg	r24
 126:	9f 4f       	sbci	r25, 0xFF	; 255
 128:	08 95       	ret

0000012a <__udivmodhi4>:
 12a:	aa 1b       	sub	r26, r26
 12c:	bb 1b       	sub	r27, r27
 12e:	51 e1       	ldi	r21, 0x11	; 17
 130:	07 c0       	rjmp	.+14     	; 0x140 <__udivmodhi4_ep>

00000132 <__udivmodhi4_loop>:
 132:	aa 1f       	adc	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	a6 17       	cp	r26, r22
 138:	b7 07       	cpc	r27, r23
 13a:	10 f0       	brcs	.+4      	; 0x140 <__udivmodhi4_ep>
 13c:	a6 1b       	sub	r26, r22
 13e:	b7 0b       	sbc	r27, r23

00000140 <__udivmodhi4_ep>:
 140:	88 1f       	adc	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	5a 95       	dec	r21
 146:	a9 f7       	brne	.-22     	; 0x132 <__udivmodhi4_loop>
 148:	80 95       	com	r24
 14a:	90 95       	com	r25
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
