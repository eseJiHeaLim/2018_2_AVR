
week7_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002f  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000163  00000000  00000000  0000021f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f4  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000150  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c7  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000050  00000000  00000000  000006af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
							  {0x0F, 0x01, 0x16, 0x13, 0x19, 0x1B, 0x1F, 0x09, 0x1F, 0x1B}};



void main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
	DDRD=0xF0;
  9a:	80 ef       	ldi	r24, 0xF0	; 240
  9c:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x3F;
  9e:	8f e3       	ldi	r24, 0x3F	; 63
  a0:	84 b9       	out	0x04, r24	; 4
	DDRC=0x3F;
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	c0 e9       	ldi	r28, 0x90	; 144
  aa:	d1 e0       	ldi	r29, 0x01	; 1
	
	for(int i =0 ; i<100;i++)
	{
		
		PORTD=seg_1[0][i/10];
  ac:	c9 01       	movw	r24, r18
  ae:	6a e0       	ldi	r22, 0x0A	; 10
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	0e 94 71 00 	call	0xe2	; 0xe2 <__divmodhi4>
  b6:	fb 01       	movw	r30, r22
  b8:	e0 50       	subi	r30, 0x00	; 0
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	80 81       	ld	r24, Z
  be:	8b b9       	out	0x0b, r24	; 11
		PORTB=seg_1[1][i/10];
  c0:	82 85       	ldd	r24, Z+10	; 0x0a
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	88 e8       	ldi	r24, 0x88	; 136
  c6:	93 e1       	ldi	r25, 0x13	; 19
  c8:	fe 01       	movw	r30, r28
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <main+0x32>
{
	DDRD=0xF0;
	DDRB=0x3F;
	DDRC=0x3F;
	
	for(int i =0 ; i<100;i++)
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	24 36       	cpi	r18, 0x64	; 100
  d8:	31 05       	cpc	r19, r1
  da:	41 f7       	brne	.-48     	; 0xac <main+0x16>
		PORTB=seg_1[1][i/10];
		_delay_ms(500);
	
	}

}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <__divmodhi4>:
  e2:	97 fb       	bst	r25, 7
  e4:	09 2e       	mov	r0, r25
  e6:	07 26       	eor	r0, r23
  e8:	0a d0       	rcall	.+20     	; 0xfe <__divmodhi4_neg1>
  ea:	77 fd       	sbrc	r23, 7
  ec:	04 d0       	rcall	.+8      	; 0xf6 <__divmodhi4_neg2>
  ee:	0c d0       	rcall	.+24     	; 0x108 <__udivmodhi4>
  f0:	06 d0       	rcall	.+12     	; 0xfe <__divmodhi4_neg1>
  f2:	00 20       	and	r0, r0
  f4:	1a f4       	brpl	.+6      	; 0xfc <__divmodhi4_exit>

000000f6 <__divmodhi4_neg2>:
  f6:	70 95       	com	r23
  f8:	61 95       	neg	r22
  fa:	7f 4f       	sbci	r23, 0xFF	; 255

000000fc <__divmodhi4_exit>:
  fc:	08 95       	ret

000000fe <__divmodhi4_neg1>:
  fe:	f6 f7       	brtc	.-4      	; 0xfc <__divmodhi4_exit>
 100:	90 95       	com	r25
 102:	81 95       	neg	r24
 104:	9f 4f       	sbci	r25, 0xFF	; 255
 106:	08 95       	ret

00000108 <__udivmodhi4>:
 108:	aa 1b       	sub	r26, r26
 10a:	bb 1b       	sub	r27, r27
 10c:	51 e1       	ldi	r21, 0x11	; 17
 10e:	07 c0       	rjmp	.+14     	; 0x11e <__udivmodhi4_ep>

00000110 <__udivmodhi4_loop>:
 110:	aa 1f       	adc	r26, r26
 112:	bb 1f       	adc	r27, r27
 114:	a6 17       	cp	r26, r22
 116:	b7 07       	cpc	r27, r23
 118:	10 f0       	brcs	.+4      	; 0x11e <__udivmodhi4_ep>
 11a:	a6 1b       	sub	r26, r22
 11c:	b7 0b       	sbc	r27, r23

0000011e <__udivmodhi4_ep>:
 11e:	88 1f       	adc	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	5a 95       	dec	r21
 124:	a9 f7       	brne	.-22     	; 0x110 <__udivmodhi4_loop>
 126:	80 95       	com	r24
 128:	90 95       	com	r25
 12a:	bc 01       	movw	r22, r24
 12c:	cd 01       	movw	r24, r26
 12e:	08 95       	ret

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
