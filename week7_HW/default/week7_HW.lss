
week7_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002f  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c1  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010e  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000191  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c7  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000100  00000000  00000000  000007d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
unsigned char seg_2[2][10] = {{0x30, 0x20, 0x30, 0x30, 0x20, 0x10, 0x10, 0x30, 0x30, 0x30},
							  {0x0F, 0x01, 0x16, 0x13, 0x19, 0x1B, 0x1F, 0x09, 0x1F, 0x1B}};


void main()
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	DDRD=0xF0;
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x3F;
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	84 b9       	out	0x04, r24	; 4
	DDRC=0x3F;
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	00 e9       	ldi	r16, 0x90	; 144
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <main+0x62>
	while(1)
	{
		// 0~99까지 증가 
		for(int i =0 ; i<100;i++)
		{
			PORTD=seg_1[0][i/10];
  b2:	ce 01       	movw	r24, r28
  b4:	6a e0       	ldi	r22, 0x0A	; 10
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
  bc:	9b 01       	movw	r18, r22
  be:	20 50       	subi	r18, 0x00	; 0
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	d9 01       	movw	r26, r18
  c4:	8c 91       	ld	r24, X
  c6:	8b b9       	out	0x0b, r24	; 11
			PORTB=seg_2[0][i%10]|seg_1[1][i/10];
  c8:	ce 01       	movw	r24, r28
  ca:	6a e0       	ldi	r22, 0x0A	; 10
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
  d2:	fc 01       	movw	r30, r24
  d4:	ec 5e       	subi	r30, 0xEC	; 236
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	d9 01       	movw	r26, r18
  da:	1a 96       	adiw	r26, 0x0a	; 10
  dc:	8c 91       	ld	r24, X
  de:	90 81       	ld	r25, Z
  e0:	89 2b       	or	r24, r25
  e2:	85 b9       	out	0x05, r24	; 5
			PORTC=seg_2[1][i%10];
  e4:	82 85       	ldd	r24, Z+10	; 0x0a
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	88 e8       	ldi	r24, 0x88	; 136
  ea:	93 e1       	ldi	r25, 0x13	; 19
  ec:	f8 01       	movw	r30, r16
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d9 f7       	brne	.-10     	; 0xec <main+0x56>
	DDRC=0x3F;
	
	while(1)
	{
		// 0~99까지 증가 
		for(int i =0 ; i<100;i++)
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	c4 36       	cpi	r28, 0x64	; 100
  fa:	d1 05       	cpc	r29, r1
  fc:	d4 f2       	brlt	.-76     	; 0xb2 <main+0x1c>
  fe:	c3 e6       	ldi	r28, 0x63	; 99
 100:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(500);
		}
		//99~0 까지의 감소 
		for(int i =99 ; i>0;i--)
		{
			PORTD=seg_1[0][i/10];
 102:	ce 01       	movw	r24, r28
 104:	6a e0       	ldi	r22, 0x0A	; 10
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
 10c:	9b 01       	movw	r18, r22
 10e:	20 50       	subi	r18, 0x00	; 0
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	f9 01       	movw	r30, r18
 114:	80 81       	ld	r24, Z
 116:	8b b9       	out	0x0b, r24	; 11
			PORTB=seg_2[0][i%10]|seg_1[1][i/10];
 118:	ce 01       	movw	r24, r28
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
 122:	fc 01       	movw	r30, r24
 124:	ec 5e       	subi	r30, 0xEC	; 236
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	d9 01       	movw	r26, r18
 12a:	1a 96       	adiw	r26, 0x0a	; 10
 12c:	8c 91       	ld	r24, X
 12e:	90 81       	ld	r25, Z
 130:	89 2b       	or	r24, r25
 132:	85 b9       	out	0x05, r24	; 5
			PORTC=seg_2[1][i%10];
 134:	82 85       	ldd	r24, Z+10	; 0x0a
 136:	88 b9       	out	0x08, r24	; 8
 138:	88 e8       	ldi	r24, 0x88	; 136
 13a:	93 e1       	ldi	r25, 0x13	; 19
 13c:	f8 01       	movw	r30, r16
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <main+0xa6>
			PORTC=seg_2[1][i%10];
		
			_delay_ms(500);
		}
		//99~0 까지의 감소 
		for(int i =99 ; i>0;i--)
 146:	21 97       	sbiw	r28, 0x01	; 1
 148:	e1 f6       	brne	.-72     	; 0x102 <main+0x6c>
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	d4 cf       	rjmp	.-88     	; 0xf8 <main+0x62>

00000150 <__divmodhi4>:
 150:	97 fb       	bst	r25, 7
 152:	09 2e       	mov	r0, r25
 154:	07 26       	eor	r0, r23
 156:	0a d0       	rcall	.+20     	; 0x16c <__divmodhi4_neg1>
 158:	77 fd       	sbrc	r23, 7
 15a:	04 d0       	rcall	.+8      	; 0x164 <__divmodhi4_neg2>
 15c:	0c d0       	rcall	.+24     	; 0x176 <__udivmodhi4>
 15e:	06 d0       	rcall	.+12     	; 0x16c <__divmodhi4_neg1>
 160:	00 20       	and	r0, r0
 162:	1a f4       	brpl	.+6      	; 0x16a <__divmodhi4_exit>

00000164 <__divmodhi4_neg2>:
 164:	70 95       	com	r23
 166:	61 95       	neg	r22
 168:	7f 4f       	sbci	r23, 0xFF	; 255

0000016a <__divmodhi4_exit>:
 16a:	08 95       	ret

0000016c <__divmodhi4_neg1>:
 16c:	f6 f7       	brtc	.-4      	; 0x16a <__divmodhi4_exit>
 16e:	90 95       	com	r25
 170:	81 95       	neg	r24
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	08 95       	ret

00000176 <__udivmodhi4>:
 176:	aa 1b       	sub	r26, r26
 178:	bb 1b       	sub	r27, r27
 17a:	51 e1       	ldi	r21, 0x11	; 17
 17c:	07 c0       	rjmp	.+14     	; 0x18c <__udivmodhi4_ep>

0000017e <__udivmodhi4_loop>:
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	a6 17       	cp	r26, r22
 184:	b7 07       	cpc	r27, r23
 186:	10 f0       	brcs	.+4      	; 0x18c <__udivmodhi4_ep>
 188:	a6 1b       	sub	r26, r22
 18a:	b7 0b       	sbc	r27, r23

0000018c <__udivmodhi4_ep>:
 18c:	88 1f       	adc	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	5a 95       	dec	r21
 192:	a9 f7       	brne	.-22     	; 0x17e <__udivmodhi4_loop>
 194:	80 95       	com	r24
 196:	90 95       	com	r25
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
