
week8_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000025  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d0  00000000  00000000  000002dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011d  00000000  00000000  000005ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ba  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c1  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000236  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

unsigned char seg_1[2][10] = {{0xF0, 0x60, 0xB0, 0xF0, 0x60, 0xD0, 0xD0, 0x70, 0xF0, 0xF0},
							  {0x03, 0x00, 0x05, 0x04, 0x06, 0x06, 0x07, 0x02, 0x07, 0x06}};

int   main()
{
  96:	9f 92       	push	r9
  98:	af 92       	push	r10
  9a:	bf 92       	push	r11
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	unsigned char in;

	DDRD = 0xF3;
  ac:	83 ef       	ldi	r24, 0xF3	; 243
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 b9       	out	0x04, r24	; 4
	DDRC=0xFF;
  b4:	87 b9       	out	0x07, r24	; 7
		{
			while(1)
			{
				if (cnt==0)
				{
					PORTD=seg_1[0][0];
  b6:	90 90 00 01 	lds	r9, 0x0100
					PORTB=seg_1[1][0]|0x30;
  ba:	10 91 0a 01 	lds	r17, 0x010A
  be:	10 63       	ori	r17, 0x30	; 48
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c4:	c0 e9       	ldi	r28, 0x90	; 144
  c6:	d1 e0       	ldi	r29, 0x01	; 1
					break;
				}
				for (int i= 0;i<2;i++)
				{
					PORTB = (PORTB&~(0x10<<i));
  c8:	40 e1       	ldi	r20, 0x10	; 16
  ca:	e4 2e       	mov	r14, r20
  cc:	f1 2c       	mov	r15, r1
				}
				//PORTB=PORTB&seg_1[0][cnt];

				for (int i= 0;i<6;i++)
				{
					PORTC= ~(0x01<<i);
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	a9 2e       	mov	r10, r25
  d2:	b1 2c       	mov	r11, r1
				}
					for (int i= 0;i<2;i++)
				{
				
				
					PORTB |= (0xD0>>i)|seg_1[1][cnt];
  d4:	80 ed       	ldi	r24, 0xD0	; 208
  d6:	c8 2e       	mov	r12, r24
  d8:	d1 2c       	mov	r13, r1
	
	
	while(1){ 
	
	
		in = (PIND & 0x0C);	
  da:	89 b1       	in	r24, 0x09	; 9
  dc:	8c 70       	andi	r24, 0x0C	; 12
		  // PD2, PD3 입력값 확인
		if (in== 0x04)
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	b1 f4       	brne	.+44     	; 0x10e <main+0x78>
		{
				cnt=cnt+1;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
			if (cnt==10)
  e6:	2a 30       	cpi	r18, 0x0A	; 10
  e8:	31 05       	cpc	r19, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <main+0x5a>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
			{
				cnt=0;
			}
			PORTD=seg_1[0][cnt];
  f0:	f9 01       	movw	r30, r18
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
  f8:	8b b9       	out	0x0b, r24	; 11
			PORTB=seg_1[1][cnt];
  fa:	82 85       	ldd	r24, Z+10	; 0x0a
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	88 e8       	ldi	r24, 0x88	; 136
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	fe 01       	movw	r30, r28
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x6e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <main+0x6c>
 10c:	e6 cf       	rjmp	.-52     	; 0xda <main+0x44>
		//PORTB = in;	  // 입력받은 포트 D의 값을 포트 B (led)로 출력
		}



		else if (in==0x08)
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	21 f7       	brne	.-56     	; 0xda <main+0x44>
 112:	f9 01       	movw	r30, r18
 114:	e0 50       	subi	r30, 0x00	; 0
 116:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			while(1)
			{
				if (cnt==0)
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	e0 30       	cpi	r30, 0x00	; 0
 11c:	f8 07       	cpc	r31, r24
 11e:	29 f4       	brne	.+10     	; 0x12a <main+0x94>
				{
					PORTD=seg_1[0][0];
 120:	9b b8       	out	0x0b, r9	; 11
					PORTB=seg_1[1][0]|0x30;
 122:	15 b9       	out	0x05, r17	; 5
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	d8 cf       	rjmp	.-80     	; 0xda <main+0x44>
				}
				for (int i= 0;i<2;i++)
				{
					PORTB = (PORTB&~(0x10<<i));

					PORTB|= (0x10<<i)|seg_1[1][cnt];
 12a:	62 85       	ldd	r22, Z+10	; 0x0a
				
			     	PORTD=seg_1[0][cnt];
 12c:	70 81       	ld	r23, Z
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
					PORTB=seg_1[1][0]|0x30;
					break;
				}
				for (int i= 0;i<2;i++)
				{
					PORTB = (PORTB&~(0x10<<i));
 132:	95 b1       	in	r25, 0x05	; 5
 134:	97 01       	movw	r18, r14
 136:	04 2e       	mov	r0, r20
 138:	02 c0       	rjmp	.+4      	; 0x13e <main+0xa8>
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <main+0xa4>
 142:	82 2f       	mov	r24, r18
 144:	80 95       	com	r24
 146:	89 23       	and	r24, r25
 148:	85 b9       	out	0x05, r24	; 5

					PORTB|= (0x10<<i)|seg_1[1][cnt];
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	86 2b       	or	r24, r22
 14e:	82 2b       	or	r24, r18
 150:	85 b9       	out	0x05, r24	; 5
				
			     	PORTD=seg_1[0][cnt];
 152:	7b b9       	out	0x0b, r23	; 11
 154:	88 eb       	ldi	r24, 0xB8	; 184
 156:	9b e0       	ldi	r25, 0x0B	; 11
 158:	de 01       	movw	r26, r28
 15a:	11 97       	sbiw	r26, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 160:	d9 f7       	brne	.-10     	; 0x158 <main+0xc2>
				{
					PORTD=seg_1[0][0];
					PORTB=seg_1[1][0]|0x30;
					break;
				}
				for (int i= 0;i<2;i++)
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	42 30       	cpi	r20, 0x02	; 2
 168:	51 05       	cpc	r21, r1
 16a:	19 f7       	brne	.-58     	; 0x132 <main+0x9c>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0

				for (int i= 0;i<6;i++)
				{
					PORTC= ~(0x01<<i);
					PORTD=seg_1[0][cnt];
						PORTB=seg_1[1][cnt]|0x30;
 170:	06 2f       	mov	r16, r22
 172:	00 63       	ori	r16, 0x30	; 48
				}
				//PORTB=PORTB&seg_1[0][cnt];

				for (int i= 0;i<6;i++)
				{
					PORTC= ~(0x01<<i);
 174:	c5 01       	movw	r24, r10
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0xe8>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <main+0xe4>
 182:	80 95       	com	r24
 184:	88 b9       	out	0x08, r24	; 8
					PORTD=seg_1[0][cnt];
 186:	7b b9       	out	0x0b, r23	; 11
						PORTB=seg_1[1][cnt]|0x30;
 188:	05 b9       	out	0x05, r16	; 5
 18a:	88 eb       	ldi	r24, 0xB8	; 184
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	de 01       	movw	r26, r28
 190:	11 97       	sbiw	r26, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	d9 f7       	brne	.-10     	; 0x18e <main+0xf8>
					_delay_ms(300);

				}
				//PORTB=PORTB&seg_1[0][cnt];

				for (int i= 0;i<6;i++)
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	26 30       	cpi	r18, 0x06	; 6
 19e:	31 05       	cpc	r19, r1
 1a0:	49 f7       	brne	.-46     	; 0x174 <main+0xde>
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
				}
					for (int i= 0;i<2;i++)
				{
				
				
					PORTB |= (0xD0>>i)|seg_1[1][cnt];
 1a6:	25 b1       	in	r18, 0x05	; 5
 1a8:	26 2b       	or	r18, r22
 1aa:	c6 01       	movw	r24, r12
 1ac:	04 2e       	mov	r0, r20
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x11e>
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <main+0x11a>
 1b8:	28 2b       	or	r18, r24
 1ba:	25 b9       	out	0x05, r18	; 5
					PORTD=seg_1[0][cnt];
 1bc:	7b b9       	out	0x0b, r23	; 11
 1be:	88 eb       	ldi	r24, 0xB8	; 184
 1c0:	9b e0       	ldi	r25, 0x0B	; 11
 1c2:	de 01       	movw	r26, r28
 1c4:	11 97       	sbiw	r26, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <main+0x12c>
					PORTD=seg_1[0][cnt];
						PORTB=seg_1[1][cnt]|0x30;
					_delay_ms(300);
				
				}
					for (int i= 0;i<2;i++)
 1cc:	4f 5f       	subi	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	42 30       	cpi	r20, 0x02	; 2
 1d2:	51 05       	cpc	r21, r1
 1d4:	41 f7       	brne	.-48     	; 0x1a6 <main+0x110>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
				}
			
	
				for (int i= 0;i<6;i++)
				{
					PORTC= ~(0x10>>i);
 1da:	c7 01       	movw	r24, r14
 1dc:	02 2e       	mov	r0, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0x14e>
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <main+0x14a>
 1e8:	80 95       	com	r24
 1ea:	88 b9       	out	0x08, r24	; 8
					PORTD=seg_1[0][cnt];
 1ec:	7b b9       	out	0x0b, r23	; 11
						PORTB=seg_1[1][cnt]|0x30;
 1ee:	05 b9       	out	0x05, r16	; 5
 1f0:	88 eb       	ldi	r24, 0xB8	; 184
 1f2:	9b e0       	ldi	r25, 0x0B	; 11
 1f4:	de 01       	movw	r26, r28
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x160>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <main+0x15e>
					_delay_ms(300);

				}
			
	
				for (int i= 0;i<6;i++)
 1fe:	2f 5f       	subi	r18, 0xFF	; 255
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	26 30       	cpi	r18, 0x06	; 6
 204:	31 05       	cpc	r19, r1
 206:	49 f7       	brne	.-46     	; 0x1da <main+0x144>
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	86 cf       	rjmp	.-244    	; 0x118 <main+0x82>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
